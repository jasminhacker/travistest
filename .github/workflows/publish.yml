name: Publish Raveberry
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
  test-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install pip dependencies
        run: |
          pip install -U pip
          pip install -r requirements/install.txt
      - run: sudo apt-get install -y expect
      - name: remove pyyaml
        run: |
          sudo rm -rf /usr/lib/python3/dist-packages/yaml
          sudo rm -rf /usr/lib/python3/dist-packages/PyYAML-*
      - run: sudo systemctl start postgresql
      - run: expect -c 'set timeout -1; spawn bin/raveberry --confirm-config system-install; expect ":"; send "admin\r"; expect ":"; send "admin\r"; expect eof; catch wait result; exit [lindex $result 3]'
        #- name: Setup tmate session
        #  uses: mxschmitt/action-tmate@v3
      - name: Check if server is up
        run: |
          counter=0
          until [[ $(curl -sS http://localhost/api/version/) == "Raveberry version"* ]] || [ $counter -gt 60 ]
          do
            echo Counter: $counter
            counter=$((counter + 1))
            sleep 1
          done

  check-versions:
    runs-on: ubuntu-latest
    outputs:
      # use output instead of conclusion because there are issues if the step does not succeed
      docker-status: ${{ steps.comparison.outputs.docker-status }}
      pypi-status: ${{ steps.comparison.outputs.pypi-status }}
    steps:
      - uses: actions/checkout@v2
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-install, check-versions]
    if: needs.check-versions.outputs.pypi-status == 'update'
    # from https://packaging.python.org/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
    steps:
      - run: echo "publishing docker"
  docker-publish:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-install, check-versions]
    if: needs.check-versions.outputs.docker-status == 'update'
    steps:
      - uses: actions/checkout@v2
