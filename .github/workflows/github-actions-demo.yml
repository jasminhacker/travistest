name: Raveberry Deploy
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      #- uses: actions/setup-python@v2
      #  with:
      #    python-version: '3.7'
      #- uses: actions/setup-node@v2
      #  with:
      #    node-version: 'lts/*'
      #- name: Install pip dependencies
      #  run: |
      #    pip install -U pip
      #    pip install -r requirements/ci.txt
      #- run: yarn --cwd frontend install
      #- run: yarn --cwd frontend build
      #- run: yarn --cwd frontend test
  test-backend:
    runs-on: ubuntu-latest
    #services:
    #  # from https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    #  postgres:
    #    image: postgres
    #    env:
    #      POSTGRES_DB: raveberry
    #      POSTGRES_USER: raveberry
    #      POSTGRES_PASSWORD: raveberry
    #    options: >-
    #      --health-cmd pg_isready
    #      --health-interval 10s
    #      --health-timeout 5s
    #      --health-retries 5
    #    ports:
    #      - 5432:5432
    #  # from https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
    #  redis:
    #    image: redis
    #    options: >-
    #      --health-cmd "redis-cli ping"
    #      --health-interval 10s
    #      --health-timeout 5s
    #      --health-retries 5
    #    ports:
    #      - 6379:6379
    #  # in order to use the raveberry/raveberry-mopidy container,
    #  # we would need to share the songs cache. Instead, run mopidy on the host.
    steps:
      - uses: actions/checkout@v2
      #- uses: actions/setup-python@v2
      #  with:
      #    python-version: '3.7'
      #- name: Install pip dependencies
      #  run: |
      #    pip install -U pip
      #    pip install -r requirements/ci.txt
      #- run: sudo apt-get -y install ffmpeg mopidy gstreamer1.0-plugins-bad
      #- name: Start mopidy
      #  run: |
      #    mopidy -o "audio/output=fakesink sync=true" &
      #    # wait for mopidy so it can handle connections
      #    sleep 5
      #- name: Prepare database
      #  run: |
      #    python manage.py migrate
      #    python manage.py installwatson
      #    python manage.py buildwatson
      #- run: python manage.py test
  #pypi-publish:
  #  runs-on: ubuntu-latest
  #  needs: [test-frontend, test-backend]
  #  # from https://packaging.python.org/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  #  steps:
  #  - uses: actions/checkout@v2
  #  - uses: actions/setup-python@v2
  #    with:
  #      python-version: '3.7'
  #  - name: Install pypa/build
  #    run: pip install build --user
  #  - name: Create module folder
  #    run: |
  #      mkdir raveberry
  #      # move all files except those needed for packaging
  #      mv `\ls -A1 | grep -v -E '(setup.py|MANIFEST.in|raveberry)'` raveberry
  #  - name: Build a binary wheel and a source tarball
  #    run: python -m build --sdist --wheel --outdir dist/
  #  - name: Publish to Test PyPI
  #    uses: pypa/gh-action-pypi-publish@release/v1
  #    with:
  #      password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #      repository_url: https://test.pypi.org/legacy/
  #      skip_existing: true
  check-docker-version:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.early.comparison }}
    steps:
      - run: DOCKER_VERSION=$(docker pull raveberry/raveberry >/dev/null && docker run raveberry/raveberry /bin/cat /opt/raveberry/VERSION | tr -d '[:space:]')
      - run: PYPI_VERSION="$(cat VERSION | tr -d '[:space:]')"
      - name: Compare versions
        id: comparison
        run: '[ "$DOCKER_VERSION" == "$PYPI_VERSION" ]'
  docker-publish:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, check-docker-version]
    if: needs.check-docker-version.outputs.status == 'success'
    steps:
      - run: echo "publishing docker"
        #- uses: actions/setup-python@v2
        #  with:
        #    python-version: '3.7'
        #- uses: actions/setup-node@v2
        #  with:
        #    node-version: 'lts/*'
        #- name: Install pip dependencies
        #  run: |
        #    pip install -U pip
        #    pip install -r requirements/ci.txt
        #- run: yarn --cwd frontend install
        #- run: yarn --cwd frontend build
