name: Raveberry Deploy
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
jobs:
  #test-frontend:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: actions/setup-python@v2
  #      with:
  #        python-version: '3.7'
  #        architecture: 'x64'
  #    - uses: actions/setup-node@v2
  #      with:
  #        node-version: 'lts/*'
  #    - name: Install pip dependencies
  #      run: |
  #        pip install -U pip
  #        pip install -r requirements/ci.txt
  #    - run: yarn --cwd frontend install
  #    - run: yarn --cwd frontend build
  #    - run: yarn --cwd frontend test
  test-backend:
    runs-on: ubuntu-latest
    services:
      # from https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
      postgres:
        image: postgres
        env:
          POSTGRES_DB: raveberry
          POSTGRES_USER: raveberry
          POSTGRES_PASSWORD: raveberry
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      # from https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      mopidy:
        image: raveberry/raveberry-mopidy
        env:
          MOPIDY_OUTPUT: fakesink sync=true
        ports:
          - 6680:6680
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
      - name: Install pip dependencies
        run: |
          pip install -U pip
          pip install -r requirements/ci.txt
      - run: sudo apt-get -y install ffmpeg
      - run: docker ps
      - run: docker ps -q | xargs -L 1 docker logs
      - name: Prepare database
        run: |
          python manage.py migrate
          python manage.py installwatson
          python manage.py buildwatson
      - run: python manage.py test --failfast tests.client.test_localdrive.LocaldriveTests.test_suggested_song

